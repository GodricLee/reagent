generator client {
  provider = "prisma-client-js"
  output   = env("PRISMA_OUTPUT")
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ONLY ONE should be available -- multi-login is handled with the UserMerges table
  // the relation is on the other table because prisma wants it on the non-optional side
  // so there's no actual constraint to make sure we don't have more than one auth for a user
  // (though we do have a unique constraint on the individual tables)
  githubAuth  GitHubAuth?  @relation("UserGitHubAuth")
  ltiv1p3Auth LTIv1p3Auth? @relation("LTIv1p3Auth")

  userInfo UserInfo?

  merges1 UserMerge[] @relation("user1")
  merges2 UserMerge[] @relation("user2")

  rejectedMerges1 RejectedMerge[] @relation("user1")
  rejectedMerges2 RejectedMerge[] @relation("user2")

  editedNogginRevisions NogginRevision[]

  teams                            Team[]
  organizations                    OrganizationMembership[]
  noggins                          Noggin[]
  modelProviderPersonalCredentials ModelProviderPersonalCredentials[]
}

model UserInfo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  displayName String?
}

model GitHubAuth {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation("UserGitHubAuth", fields: [userId], references: [id])
  userId Int  @unique

  githubId String @unique
}

model LTIv1p3Auth {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation("LTIv1p3Auth", fields: [userId], references: [id])
  userId Int  @unique

  ltiConnection   LTIv1p3Connection @relation(fields: [ltiConnectionId], references: [id])
  ltiConnectionId Int

  ltiUserId String

  @@unique([ltiConnectionId, ltiUserId])
}

model LTIv1p3Connection {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  consumerKey    String @unique
  consumerSecret String

  lastSeenConsumerName String?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int          @unique

  userAuths LTIv1p3Auth[]
}

model UserMerge {
  id        Int       @id @default(autoincrement())
  user1     User      @relation("user1", fields: [user1Id], references: [id])
  user1Id   Int
  user2     User      @relation("user2", fields: [user2Id], references: [id])
  user2Id   Int
  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

// don't nag the user about a merge opportunity
model RejectedMerge {
  id        Int      @id @default(autoincrement())
  user1     User     @relation("user1", fields: [user1Id], references: [id])
  user1Id   Int
  user2     User     @relation("user2", fields: [user2Id], references: [id])
  user2Id   Int
  createdAt DateTime @default(now())
}

model Organization {
  id                          Int                           @id @default(autoincrement())
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  deletedAt                   DateTime?
  name                        String
  teams                       Team[]
  members                     OrganizationMembership[]
  noggins                     Noggin[]
  ltiv1p3Connection           LTIv1p3Connection?
  modelProviderOrgCredentials ModelProviderOrgCredentials[]
  enabledAIModels             AIModel[]
}

enum OrganizationMembershipRole {
  member
  manager
  owner
}

model OrganizationMembership {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  role OrganizationMembershipRole

  totalPermittedSpendQuastra BigInt?

  @@unique([organizationId, userId])
}

model Team {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  name      String    @unique

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  members User[]

  // nogginRevisions NogginRevisions[]
  noggins Noggin[]
}

//

model Noggin {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  title     String
  slug      String    @unique

  // a noggin can only be owned by a team or a user, not both
  userOwner   User? @relation(fields: [userOwnerId], references: [id])
  userOwnerId Int?
  teamOwner   Team? @relation(fields: [teamOwnerId], references: [id])
  teamOwnerId Int?

  // both team-owned and user-owned noggins can have a parent organization. required for team-owned noggins
  parentOrg   Organization? @relation(fields: [parentOrgId], references: [id])
  parentOrgId Int?

  nogginRevisions NogginRevision[]

  aiModel   AIModel @relation(fields: [aiModelId], references: [id])
  aiModelId Int

  apiKeys NogginAPIKey[]

  totalAllocatedCreditQuastra BigInt?
}

model NogginRevision {
  id        Int       @id @default(autoincrement())
  noggin    Noggin    @relation(fields: [nogginId], references: [id])
  nogginId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  content         Bytes
  nogginVariables Json? // this is redundant with the content, but we want to be able to grab it from the db for a few pages
  outputSchema    Json? // also redundant

  editors User[] // todo

  runs NogginRun[]
}

model NogginAPIKey {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  key      String @unique
  noggin   Noggin @relation(fields: [nogginId], references: [id])
  nogginId Int

  // set only if this key is for the reagent UI
  primaryUIKeyReagentUserId Int?

  canViewRunResult      Boolean
  canViewFullRunHistory Boolean
  canCreateRun          Boolean

  @@unique([nogginId, primaryUIKeyReagentUserId])
}

model NogginRun {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  nogginRevision       NogginRevision         @relation(fields: [nogginRevisionId], references: [id])
  nogginRevisionId     Int
  nogginRunLogEntry    NogginRunLogEntry[]
  nogginRunOutputEntry NogginRunOutputEntry[]

  status NogginRunStatus

  // TODO: these might be something we'd want to normalize
  evaluatedParameters Json?
  evaluatedOverrides  Json?

  // after parameters have been evaluated and we know what the request to the model looks like,
  // we'd like to show the user exactly what was requested (in the 'use' tab on reagent) -- but
  // we'd like to make this pretty, so the noggin gets to decide how it gets rendered, corresponding
  // roughly to a render tree on the client. this render leaves a 'void' where the model output
  // should go.
  ioVisualizationRender Json?

  nogginOutputAssetObject NogginOutputAssetObject[]
  cost                    NogginRunCost?
}

model NogginRunCost {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  nogginRun   NogginRun @relation(fields: [nogginRunId], references: [id])
  nogginRunId Int       @unique

  // cost is in quastra === 0.0001 credits === 0.0001 cents, US.
  estimatedCostQuastra BigInt?
  estimationMetadata   Json?
  computedCostQuastra  BigInt?
  computationMetadata  Json?
}

// if changing log level or stage, keep the code in sync. something is wrong with the type emission

enum NogginRunLogLevel {
  debug
  info
  warn
  error
}

enum NogginRunLogEntryStage {
  request
  authenticate
  process_parameters
  anticipate_cost
  run_model
  calculate_cost
  postprocess
  deliver

  other
}

model NogginRunLogEntry {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  entryTypeVersion Int

  run   NogginRun @relation(fields: [runId], references: [id])
  runId Int

  timestamp   BigInt? // doesn't really have to be nullable but i don't want to clear my dev db or write a migration rn
  level       NogginRunLogLevel
  stage       NogginRunLogEntryStage
  message     Json
  privateData Json? // so we can store extra (secret?) debug data that shouldn't make it to the client
}

enum NogginRunOutputEntryContentType {
  text
  assetUrl
  error
}

enum NogginRunOutputEntryStage {
  incremental
  final
}

model NogginRunOutputEntry {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  entryTypeVersion Int

  run   NogginRun @relation(fields: [runId], references: [id])
  runId Int

  contentType NogginRunOutputEntryContentType
  content     String
  metadata    Json?

  stage NogginRunOutputEntryStage
}

enum NogginRunStatus {
  pending
  running
  succeeded
  failed
}

//

model ModelProvider {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  name         String    @unique
  friendlyName String
  models       AIModel[]

  credentialsSchema                Json
  credentialsSchemaVersion         Int
  needsCredentials                 Boolean
  modelProviderPersonalCredentials ModelProviderPersonalCredentials[]
  modelProviderOrgCredentials      ModelProviderOrgCredentials[]
}

model ModelProviderPersonalCredentials {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  modelProvider   ModelProvider @relation(fields: [modelProviderId], references: [id])
  modelProviderId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  credentials        Json
  credentialsVersion Int

  @@unique([modelProviderId, userId, credentialsVersion])
}

model ModelProviderOrgCredentials {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  modelProvider   ModelProvider @relation(fields: [modelProviderId], references: [id])
  modelProviderId Int

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int

  credentials        Json
  credentialsVersion Int

  @@unique([modelProviderId, organizationId, credentialsVersion])
}

model AIModel {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  modelProvider   ModelProvider @relation(fields: [modelProviderId], references: [id])
  modelProviderId Int
  name            String

  revision String

  editorSchema Json

  noggin                Noggin[]
  enablingOrganizations Organization[]

  @@unique([modelProviderId, name, revision])
}

//

model NogginOutputAssetObject {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  nogginRun   NogginRun @relation(fields: [nogginRunId], references: [id])
  nogginRunId Int

  mimeType String

  uuid     String @unique
  filename String
  url      String
}
